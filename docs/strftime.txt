语法:
   string strftime    ( string $format   [, int $timestamp = time()  ] )
说明:
返回用给定的格式字串对给出的timestamp进行格式输出后的字符串。如果没有给出时间戳则用当前的本地时间。月份和星期几以及其它和语言有关的字符串写法和用setlocale()设定的当前的区域有关。
参数:
  参数              format                                   format 里能够识别的格式字串有以下标记：                                      格式           描述           返回值示例                                                 日           ---           ---                               %a           当前区域星期几的简写           Sun 到 Sat                               %A           当前区域星期几的全称           Sunday 到 Saturday                               %d           月份中的第几天，十进制数字（范围从 01 到 31）           01 到 31                               %e                       月份中的第几天，十进制数字，一位的数字前会加上一个空格（范围从 &#039; 1&#039; 到 &#039;31&#039;）            在 Windows 上尚未按描述实现。更多信息见下方。                       1 到 31                               %j           年份中的第几天，带前导零的三位十进制数（范围从  001 到 366）           001 到 366                               %u           符合 ISO-8601 星期几的十进制数表达 [1,7]，1 表示星期一           1 (星期一) 到 7 (星期日)                               %w           星期中的第几天，星期天为 0           0 (星期天) 到 6 (星期六)                               周           ---           ---                               %U           本年的第几周，从第一周的第一个星期天作为第一天开始           13 (for the 13th full week of the year)                               %V                       %V - 本年第几周的 ISO-8601:1988 格式，范围从 01 到 53，第            1 周是本年第一个至少还有 4 天的星期，星期一作为每周的第一天。（用            %G 或者 %g 作为指定时间戳相应周数的年份组成。）                      01 到 53 (where 53            accounts for an overlapping week)                               %W           本年的第几周数，从第一周的第一个星期一作为第一天开始           46 (for the 46th week of the year beginning            with a Monday)                               月           ---           ---                               %b           当前区域月份的简写           Jan 到 Dec                               %B           当前区域月份的全称           January 到 December                               %h           当前区域月份的简写（%b 的别名）           Jan 到 Dec                               %m           两位数的月份           01 (是一月份) 到 12 (是十二月份)                               年           ---           ---                               %C           两位数显示世纪（年份除以 100，截成整数）           19 是 20 世纪                               %g                       2 位数的年份，符合 ISO-8601:1988 星期数（参见            %V）。和 %V 的格式和值一样，只除了如果 ISO 星期数属于前一年或者后一年，则使用那一年。                      比如：2009年1月6日那一周是 09。                               %G           %g 的完整四位数版本           比如：2009年1月3日那一周是  2008.                               %y           两位数显示年份           比如： 09 是 2009，79 是 1979                               %Y           四位数显示年份           比如： 2038                               时间           ---           ---                               %H           以 24 小时格式显示两位小时数           00 到 23                               %I           以 12 小时格式显示两位小时数           01 到 12                               %l（&#039;L&#039; 的小写）           以 12 小时格式显示小时数，单个数字前含空格            1 到 12                               %M           两位的分钟数           00 到 59                               %p           指定时间的大写 “AM” 或 “PM”           比如： 00:31 是 AM ，22:23 是PM                               %P           指定时间的小写 “am” 或 “pm”           比如：00:31 是 am ，22:23 是pm                               %r           和 &quot;%I:%M:%S %p&quot; 一样           比如： 21:34:17 是 09:34:17 PM                               %R           和 &quot;%H:%M&quot; 一样           比如： 12:35 AM 是 00:35，4:44 PM 是 16:44                               %S           两位数字表示秒           00 到 59                               %T           和 &quot;%H:%M:%S&quot; 一样           比如： 09:34:17 PM 是 21:34:17                               %X           当前区域首选的时间表示法，不包括日期           例如： 03:59:16 或 15:59:16                               %z           从 UTC 的时区偏移 或 简写（由操作系统决定）           比如： 东部时间是 -0500 或 EST                               %Z           %z 没有给出的 UTC 的时区偏移 或 简写（由操作系统决定）           比如： -0500 或 EST 是东部时间                               时间和日期戳           ---           ---                               %c           当前区域首选的日期时间表达           比如： 2009 年 2 月 5 日上午 12:45:10 是 Tue Feb  5 00:45:10 2009                               %D           和 &quot;%m/%d/%y&quot; 一样           比如： 2009 年 2 月 5 日是 02/05/09                               %F           Same as &quot;%Y-%m-%d&quot; (commonly used in database datestamps)           比如：2009 年 2 月 5 日是 2009-02-05                               %s           Unix纪元的时间戳（和 time() 函数一样）           比如： 1979 年 9 月 10 日上午 8 点 40 分 00 秒是 305815200                               %x           当前区域首选的时间表示法，不包括时间           比如： 2009 年 2 月 5 日是 02/05/09                               其他           ---           ---                               %n           换行符(&quot;\n&quot;)           ---                               %t           Tab 字符(&quot;\t&quot;)           ---                               %%           文字上的百分字符(&quot;%&quot;)           ---                                                     这个参数的最大长度是 1023 个字符。            Warning               尽管 ISO 9889:1999（当前的 C 标准）明确指出一周从星期一开始，但是        Sun Solaris 的一周似乎从星期天开始并作为 1。所以 %u 的结果也许不会和手册里描述得一样。             
返回值:
  返回值     根据指定的 timestamp 或未给出 timestamp 是使用当前本地时间，   返回 format 格式化的字符。   月份、星期名和其他与语言相关的字符串遵守 setlocale() 设置的当前区域设置。   
示例:

<?php
setlocale(LC_TIME, "C");
echo strftime("%A");
setlocale(LC_TIME, "fi_FI");
echo strftime(" in Finnish is %A,");
setlocale(LC_TIME, "fr_FR");
echo strftime(" in French %A and");
setlocale(LC_TIME, "de_DE");
echo strftime(" in German %A.\n");
?>

<?php
/*     December 2002 / January 2003
ISOWk  M   Tu  W   Thu F   Sa  Su
----- ----------------------------
51     16  17  18  19  20  21  22
52     23  24  25  26  27  28  29
1      30  31   1   2   3   4   5
2       6   7   8   9  10  11  12
3      13  14  15  16  17  18  19   */
// 输出： 12/28/2002 - %V,%G,%Y = 52,2002,2002
echo "12/28/2002 - %V,%G,%Y = " . strftime("%V,%G,%Y", strtotime("12/28/2002")) . "\n";
// 输出： 12/30/2002 - %V,%G,%Y = 1,2003,2002
echo "12/30/2002 - %V,%G,%Y = " . strftime("%V,%G,%Y", strtotime("12/30/2002")) . "\n";
// 输出： 1/3/2003 - %V,%G,%Y = 1,2003,2003
echo "1/3/2003 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("1/3/2003")) . "\n";
// 输出： 1/10/2003 - %V,%G,%Y = 2,2003,2003
echo "1/10/2003 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("1/10/2003")) . "\n";
/*     December 2004 / January 2005
ISOWk  M   Tu  W   Thu F   Sa  Su
----- ----------------------------
51     13  14  15  16  17  18  19
52     20  21  22  23  24  25  26
53     27  28  29  30  31   1   2
1       3   4   5   6   7   8   9
2      10  11  12  13  14  15  16   */
// 输出： 12/23/2004 - %V,%G,%Y = 52,2004,2004
echo "12/23/2004 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("12/23/2004")) . "\n";
// 输出： 12/31/2004 - %V,%G,%Y = 53,2004,2004
echo "12/31/2004 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("12/31/2004")) . "\n";
// 输出： 1/2/2005 - %V,%G,%Y = 53,2004,2005
echo "1/2/2005 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("1/2/2005")) . "\n";
// 输出： 1/3/2005 - %V,%G,%Y = 1,2005,2005
echo "1/3/2005 - %V,%G,%Y = " . strftime("%V,%G,%Y",strtotime("1/3/2005")) . "\n";
?>

<?php
// Jan 1: results in: '%e%1%' (%%, e, %%, %e, %%)
$format = '%%e%%%e%%';
// Check for Windows to find and replace the %e 
// modifier correctly
if (strtoupper(substr(PHP_OS, 0, 3)) == 'WIN') {
    $format = preg_replace('#(?<!%)((?:%%)*)%e#', '</refsect1>%#d', $format);
}
echo strftime($format);
?>

<?php
// Describe the formats.
$strftimeFormats = array(
    'A' => 'A full textual representation of the day',
    'B' => 'Full month name, based on the locale',
    'C' => 'Two digit representation of the century (year divided by 100, truncated to an integer)',
    'D' => 'Same as "%m/%d/%y"',
    'E' => '',
    'F' => 'Same as "%Y-%m-%d"',
    'G' => 'The full four-digit version of %g',
    'H' => 'Two digit representation of the hour in 24-hour format',
    'I' => 'Two digit representation of the hour in 12-hour format',
    'J' => '',
    'K' => '',
    'L' => '',
    'M' => 'Two digit representation of the minute',
    'N' => '',
    'O' => '',
    'P' => 'lower-case "am" or "pm" based on the given time',
    'Q' => '',
    'R' => 'Same as "%H:%M"',
    'S' => 'Two digit representation of the second',
    'T' => 'Same as "%H:%M:%S"',
    'U' => 'Week number of the given year, starting with the first Sunday as the first week',
    'V' => 'ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week',
    'W' => 'A numeric representation of the week of the year, starting with the first Monday as the first week',
    'X' => 'Preferred time representation based on locale, without the date',
    'Y' => 'Four digit representation for the year',
    'Z' => 'The time zone offset/abbreviation option NOT given by %z (depends on operating system)',
    'a' => 'An abbreviated textual representation of the day',
    'b' => 'Abbreviated month name, based on the locale',
    'c' => 'Preferred date and time stamp based on local',
    'd' => 'Two-digit day of the month (with leading zeros)',
    'e' => 'Day of the month, with a space preceding single digits',
    'f' => '',
    'g' => 'Two digit representation of the year going by ISO-8601:1988 standards (see %V)',
    'h' => 'Abbreviated month name, based on the locale (an alias of %b)',
    'i' => '',
    'j' => 'Day of the year, 3 digits with leading zeros',
    'k' => '',
    'l' => 'Hour in 12-hour format, with a space preceeding single digits',
    'm' => 'Two digit representation of the month',
    'n' => 'A newline character ("\n")',
    'o' => '',
    'p' => 'UPPER-CASE "AM" or "PM" based on the given time',
    'q' => '',
    'r' => 'Same as "%I:%M:%S %p"',
    's' => 'Unix Epoch Time timestamp',
    't' => 'A Tab character ("\t")',
    'u' => 'ISO-8601 numeric representation of the day of the week',
    'v' => '',
    'w' => 'Numeric representation of the day of the week',
    'x' => 'Preferred date representation based on locale, without the time',
    'y' => 'Two digit representation of the year',
    'z' => 'Either the time zone offset from UTC or the abbreviation (depends on operating system)',
    '%' => 'A literal percentage character ("%")',
);
// Results.
$strftimeValues = array();
// Evaluate the formats whilst suppressing any errors.
foreach($strftimeFormats as $format => $description){
    if (False !== ($value = @strftime("%{$format}"))){
        $strftimeValues[$format] = $value;
    }
}
// Find the longest value.
$maxValueLength = 2 + max(array_map('strlen', $strftimeValues));
// Report known formats.
foreach($strftimeValues as $format => $value){
    echo "Known format   : '{$format}' = ", str_pad("'{$value}'", $maxValueLength), " ( {$strftimeFormats[$format]} )\n";
}
// Report unknown formats.
foreach(array_diff_key($strftimeFormats, $strftimeValues) as $format => $description){
    echo "Unknown format : '{$format}'   ", str_pad(' ', $maxValueLength), ($description ? " ( {$description} )" : ''), "\n";
}
?>
以上例程的输出类似于：
Known format   : &#039;A&#039; = &#039;Friday&#039;            ( A full textual representation of the day )
Known format   : &#039;B&#039; = &#039;December&#039;          ( Full month name, based on the locale )
Known format   : &#039;H&#039; = &#039;11&#039;                ( Two digit representation of the hour in 24-hour format )
Known format   : &#039;I&#039; = &#039;11&#039;                ( Two digit representation of the hour in 12-hour format )
Known format   : &#039;M&#039; = &#039;24&#039;                ( Two digit representation of the minute )
Known format   : &#039;S&#039; = &#039;44&#039;                ( Two digit representation of the second )
Known format   : &#039;U&#039; = &#039;48&#039;                ( Week number of the given year, starting with the first Sunday as the first week )
Known format   : &#039;W&#039; = &#039;48&#039;                ( A numeric representation of the week of the year, starting with the first Monday as the first week )
Known format   : &#039;X&#039; = &#039;11:24:44&#039;          ( Preferred time representation based on locale, without the date )
Known format   : &#039;Y&#039; = &#039;2010&#039;              ( Four digit representation for the year )
Known format   : &#039;Z&#039; = &#039;GMT Standard Time&#039; ( The time zone offset/abbreviation option NOT given by %z (depends on operating system) )
Known format   : &#039;a&#039; = &#039;Fri&#039;               ( An abbreviated textual representation of the day )
Known format   : &#039;b&#039; = &#039;Dec&#039;               ( Abbreviated month name, based on the locale )
Known format   : &#039;c&#039; = &#039;12/03/10 11:24:44&#039; ( Preferred date and time stamp based on local )
Known format   : &#039;d&#039; = &#039;03&#039;                ( Two-digit day of the month (with leading zeros) )
Known format   : &#039;j&#039; = &#039;337&#039;               ( Day of the year, 3 digits with leading zeros )
Known format   : &#039;m&#039; = &#039;12&#039;                ( Two digit representation of the month )
Known format   : &#039;p&#039; = &#039;AM&#039;                ( UPPER-CASE "AM" or "PM" based on the given time )
Known format   : &#039;w&#039; = &#039;5&#039;                 ( Numeric representation of the day of the week )
Known format   : &#039;x&#039; = &#039;12/03/10&#039;          ( Preferred date representation based on locale, without the time )
Known format   : &#039;y&#039; = &#039;10&#039;                ( Two digit representation of the year )
Known format   : &#039;z&#039; = &#039;GMT Standard Time&#039; ( Either the time zone offset from UTC or the abbreviation (depends on operating system) )
Known format   : &#039;%&#039; = &#039;%&#039;                 ( A literal percentage character ("%") )
Unknown format : &#039;C&#039;                       ( Two digit representation of the century (year divided by 100, truncated to an integer) )
Unknown format : &#039;D&#039;                       ( Same as "%m/%d/%y" )
Unknown format : &#039;E&#039;
Unknown format : &#039;F&#039;                       ( Same as "%Y-%m-%d" )
Unknown format : &#039;G&#039;                       ( The full four-digit version of %g )
Unknown format : &#039;J&#039;
Unknown format : &#039;K&#039;
Unknown format : &#039;L&#039;
Unknown format : &#039;N&#039;
Unknown format : &#039;O&#039;
Unknown format : &#039;P&#039;                       ( lower-case "am" or "pm" based on the given time )
Unknown format : &#039;Q&#039;
Unknown format : &#039;R&#039;                       ( Same as "%H:%M" )
Unknown format : &#039;T&#039;                       ( Same as "%H:%M:%S" )
Unknown format : &#039;V&#039;                       ( ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays, with Monday being the start of the week )
Unknown format : &#039;e&#039;                       ( Day of the month, with a space preceding single digits )
Unknown format : &#039;f&#039;
Unknown format : &#039;g&#039;                       ( Two digit representation of the year going by ISO-8601:1988 standards (see %V) )
Unknown format : &#039;h&#039;                       ( Abbreviated month name, based on the locale (an alias of %b) )
Unknown format : &#039;i&#039;
Unknown format : &#039;k&#039;
Unknown format : &#039;l&#039;                       ( Hour in 12-hour format, with a space preceeding single digits )
Unknown format : &#039;n&#039;                       ( A newline character ("\n") )
Unknown format : &#039;o&#039;
Unknown format : &#039;q&#039;
Unknown format : &#039;r&#039;                       ( Same as "%I:%M:%S %p" )
Unknown format : &#039;s&#039;                       ( Unix Epoch Time timestamp )
Unknown format : &#039;t&#039;                       ( A Tab character ("\t") )
Unknown format : &#039;u&#039;                       ( ISO-8601 numeric representation of the day of the week )
Unknown format : &#039;v&#039;
