语法:
   mixed unserialize    ( string $str   )
参数:
  参数              str                  序列化后的字符串。                   若被解序列化的变量是一个对象，在成功地重新构造对象之后，PHP     会自动地试图去调用 __wakeup()     成员函数（如果存在的话）。                   Note:         unserialize_callback_func 指令                如果在解序列化的时候需要实例化一个未定义类，则可以设置回调函数以供调用（以免得到的是不完整的      object “__PHP_Incomplete_Class”）。可通过      php.ini、ini_set() 或 .htaccess       定义‘unserialize_callback_func’。每次实例化一个未定义类时它都会被调用。若要禁止这个特性，只需置空此设定。                                    
返回值:
  返回值     返回的是转换之后的值，可为      integer、float、string、array     或 object。          如果传递的字符串不可解序列化，则返回 FALSE，并产生一个 E_NOTICE。   
示例:

<?php
// 这里，我们使用 unserialize() 装载来自数据库的 $session_data 数组中的会话数据。
// 此例是描述 serialize() 的那个例子的补充。
$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($_SERVER['PHP_AUTH_USER']);
if (!odbc_execute($stmt, $sqldata) || !odbc_fetch_into($stmt, $tmp)) {
    // 如果执行出错或返回错误，则初始化为空数组
    $session_data = array();
} else {
    // 现在我们需要的是 $tmp[0] 中已序列化的数据。
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // 出错，初始化为空数组
        $session_data = array();
    }
}
?>

<?php
$serialized_object='O:1:"a":1:{s:5:"value";s:3:"100";}';
// unserialize_callback_func 从 PHP 4.2.0 起可用
ini_set('unserialize_callback_func', 'mycallback'); // 设置您的回调函数
function mycallback($classname) 
{
   // 只需包含含有类定义的文件
   // $classname 指出需要的是哪一个类
}
?>
