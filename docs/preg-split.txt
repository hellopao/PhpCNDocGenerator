语法:
   array preg_split    ( string $pattern   , string $subject   [, int $limit = -1   [, int $flags = 0  ]] )
说明:
通过一个正则表达式分隔给定字符串.
参数:
  参数              pattern                  用于搜索的模式，字符串形式。                        subject                  输入字符串                        limit                 如果指定，将限制分隔得到的子串最多只有limit个，返回的最后一个      子串将包含所有剩余部分。limit值为-1， 0或null时都代表&quot;不限制&quot;，      作为php的标准，你可以使用null跳过对flags的设置。                        flags                  flags 可以是任何下面标记的组合(以位或运算 | 组合)：                        PREG_SPLIT_NO_EMPTY                             如果这个标记被设置， preg_split() 将进返回分隔后的非空部分。                                            PREG_SPLIT_DELIM_CAPTURE                             如果这个标记设置了，用于分隔的模式中的括号表达式将被捕获并返回。                                            PREG_SPLIT_OFFSET_CAPTURE                             如果这个标记被设置, 对于每一个出现的匹配返回时将会附加字符串偏移量.           注意：这将会改变返回数组中的每一个元素, 使其每个元素成为一个由第0          个元素为分隔后的子串，第1个元素为该子串在subject          中的偏移量组成的数组。                                                       
返回值:
  返回值    返回一个使用 pattern 边界分隔 subject 后得到  的子串组成的数组。   
示例:

<?php
//使用逗号或空格(包含" ", \r, \t, \n, \f)分隔短语
$keywords = preg_split("/[\s,]+/", "hypertext language, programming");
print_r($keywords);
?>
以上例程会输出：
Array
(
    [0] => hypertext
    [1] => language
    [2] => programming
)

<?php
$str = 'string';
$chars = preg_split('//', $str, -1, PREG_SPLIT_NO_EMPTY);
print_r($chars);
?>
以上例程会输出：
Array
(
    [0] => s
    [1] => t
    [2] => r
    [3] => i
    [4] => n
    [5] => g
)

<?php
$str = 'hypertext language programming';
$chars = preg_split('/ /', $str, -1, PREG_SPLIT_OFFSET_CAPTURE);
print_r($chars);
?>
以上例程会输出：
Array
(
    [0] => Array
        (
            [0] => hypertext
            [1] => 0
        )
    [1] => Array
        (
            [0] => language
            [1] => 10
        )
    [2] => Array
        (
            [0] => programming
            [1] => 19
        )
)
