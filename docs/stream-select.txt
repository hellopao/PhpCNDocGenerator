语法:
   int stream_select    ( array &$read   , array &$write   , array &$except   , int $tv_sec   [, int $tv_usec = 0  ] )
说明:
Thestream_select()functionacceptsarraysofstreamsandwaitsforthemtochangestatus.Itsoperationisequivalenttothatofthesocket_select()functionexceptinthatitactsonstreams.
参数:
  参数              read                  The streams listed in the read array will be watched to       see if characters become available for reading (more precisely, to see if       a read will not block - in particular, a stream resource is also ready on       end-of-file, in which case an fread() will return       a zero length string).                        write                  The streams listed in the write array will be       watched to see if a write will not block.                        except                  The streams listed in the except array will be       watched for high priority exceptional (&quot;out-of-band&quot;) data arriving.            Note:                When stream_select() returns, the arrays        read, write and        except are modified to indicate which stream        resource(s) actually changed status.                          You do not need to pass every array to       stream_select(). You can leave it out and use an       empty array or NULL instead. Also do not forget that those arrays are       passed by reference and will be modified after       stream_select() returns.                        tv_sec                  The tv_sec and tv_usec       together form the timeout parameter,       tv_sec specifies the number of seconds while       tv_usec the number of microseconds.       The timeout is an upper bound on the amount of time       that stream_select() will wait before it returns.       If tv_sec and tv_usec are       both set to 0, stream_select() will       not wait for data - instead it will return immediately, indicating the       current status of the streams.                   If tv_sec is NULL stream_select()       can block indefinitely, returning only when an event on one of the       watched streams occurs (or if a signal interrupts the system call).            Warning               Using a timeout value of 0 allows you to        instantaneously poll the status of the streams, however, it is NOT a        good idea to use a 0 timeout value in a loop as it        will cause your script to consume too much CPU time.                      It is much better to specify a timeout value of a few seconds, although        if you need to be checking and running other code concurrently, using a        timeout value of at least 200000 microseconds will        help reduce the CPU usage of your script.                      Remember that the timeout value is the maximum time that will elapse;        stream_select() will return as soon as the        requested streams are ready for use.             
返回值:
  返回值     On success stream_select() returns the number of   stream resources contained in the modified arrays, which may be zero if   the timeout expires before anything interesting happens. On error FALSE   is returned and a warning raised (this can happen if the system call is   interrupted by an incoming signal).   
示例:

     This example checks to see if data has arrived for reading on either
     $stream1 or $stream2.
     Since the timeout value is 0 it will return
     immediately:
    
<?php
/* Prepare the read array */
$read   = array($stream1, $stream2);
$write  = NULL;
$except = NULL;
if (false === ($num_changed_streams = stream_select($read, $write, $except, 0))) {
    /* Error handling */
} elseif ($num_changed_streams > 0) {
    /* At least on one of the streams something interesting happened */
}
?>

<?php
$e = NULL;
stream_select($r, $w, $e, 0);
?>

<?php
$e = NULL;
if (false === stream_select($r, $w, $e, 0)) {
    echo "stream_select() failed\n";
}
?>
