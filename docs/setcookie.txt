语法:
   bool setcookie    ( string $name   [, string $value   [, int $expire = 0   [, string $path   [, string $domain   [, bool $secure = false   [, bool $httponly = false  ]]]]]] )
说明:
setcookie()definesacookietobesentalongwiththerestoftheHTTPheaders.Likeotherheaders,cookiesmustbesentbeforeanyoutputfromyourscript(thisisaprotocolrestriction).Thisrequiresthatyouplacecallstothisfunctionpriortoanyoutput,including&lt;html&gt;and&lt;head&gt;tagsaswellasanywhitespace.
参数:
  参数     All the arguments except the name argument are   optional. You may also replace an argument with an empty string   (&quot;&quot;) in order to skip that argument.   Because the expire argument is integer, it cannot   be skipped with an empty string, use a zero (0)   instead.       &raquo;&nbsp;RFC 6265 provides the normative   reference on how each setcookie() parameter is   interpreted.            name                  The name of the cookie.                        value                  The value of the cookie.  This value is stored on the clients computer;       do not store sensitive information.  Assuming the       name is &#039;cookiename&#039;, this       value is retrieved through $_COOKIE['cookiename']                        expire                  The time the cookie expires.  This is a Unix timestamp so is       in number of seconds since the epoch.  In other words, you&#039;ll       most likely set this with the time() function       plus the number of seconds before you want it to expire.  Or       you might use mktime().       time()+60*60*24*30 will set the cookie to       expire in 30 days. If set to 0, or omitted, the cookie will expire at       the end of the session (when the browser closes).                   Note:                  You may notice the expire parameter takes on a         Unix timestamp, as opposed to the date format Wdy, DD-Mon-YYYY         HH:MM:SS GMT, this is because PHP does this conversion         internally.                                       path                  The path on the server in which the cookie will be available on.       If set to &#039;/&#039;, the cookie will be available       within the entire domain.  If set to       &#039;/foo/&#039;, the cookie will only be available       within the /foo/ directory and all       sub-directories such as /foo/bar/ of       domain.  The default value is the       current directory that the cookie is being set in.                        domain                  The domain that the cookie is available to. Setting the domain to       &#039;www.example.com&#039; will make the cookie       available in the www subdomain and higher subdomains.       Cookies available to a lower domain, such as       &#039;example.com&#039; will be available to higher subdomains,       such as &#039;www.example.com&#039;.              Older browsers still implementing the deprecated       &raquo;&nbsp;RFC 2109 may require a leading       . to match all subdomains.                        secure                  Indicates that the cookie should only be transmitted over a       secure HTTPS connection from the client. When set to TRUE, the       cookie will only be set if a secure connection exists.       On the server-side, it&#039;s on the programmer to send this       kind of cookie only on secure connection (e.g. with respect to       $_SERVER["HTTPS"]).                        httponly                  When TRUE the cookie will be made accessible only through the HTTP       protocol. This means that the cookie won&#039;t be accessible by       scripting languages, such as JavaScript. It has been suggested that       this setting can effectively help to reduce identity theft through       XSS attacks (although it is not supported by all browsers), but that       claim is often disputed. Added in PHP 5.2.0.       TRUE or FALSE                     
返回值:
  返回值     If output exists prior to calling this function,   setcookie() will fail and return FALSE. If   setcookie() successfully runs, it will return TRUE.   This does not indicate whether the user accepted the cookie.   
示例:

<?php
$value = 'something from somewhere';
setcookie("TestCookie", $value);
setcookie("TestCookie", $value, time()+3600);  /* expire in 1 hour */
setcookie("TestCookie", $value, time()+3600, "/~rasmus/", "example.com", 1);
?>

<?php
// Print an individual cookie
echo $_COOKIE["TestCookie"];
echo $HTTP_COOKIE_VARS["TestCookie"];
// Another way to debug/test is to view all cookies
print_r($_COOKIE);
?>

     When deleting a cookie you should assure that the expiration date
     is in the past, to trigger the removal mechanism in your browser.
     Examples follow how to delete cookies sent in previous example:
    
<?php
// set the expiration date to one hour ago
setcookie ("TestCookie", "", time() - 3600);
setcookie ("TestCookie", "", time() - 3600, "/~rasmus/", "example.com", 1);
?>

     You may also set array cookies by using array notation in the
     cookie name. This has the effect of setting as many cookies as
     you have array elements, but when the cookie is received by your
     script, the values are all placed in an array with the cookie&#039;s
     name:
    
<?php
// set the cookies
setcookie("cookie[three]", "cookiethree");
setcookie("cookie[two]", "cookietwo");
setcookie("cookie[one]", "cookieone");
// after the page reloads, print them out
if (isset($_COOKIE['cookie'])) {
    foreach ($_COOKIE['cookie'] as $name => $value) {
        $name = htmlspecialchars($name);
        $value = htmlspecialchars($value);
        echo "$name : $value <br />\n";
    }
}
?>
以上例程会输出：
three : cookiethree
two : cookietwo
one : cookieone
